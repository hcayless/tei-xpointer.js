{"name":"jQuery.ajaxPrefilter","type":"method","title":"jQuery.ajaxPrefilter()","desc":"Handle custom Ajax options or modify existing options before each request is sent and before they are processed by <code>$.ajax()</code>.","categories":["ajax/low-level-interface","version/1.5"],"entries":[{"return":"undefined","signatures":{"added":"1.5","argument":[{"desc":"An optional string containing one or more space-separated dataTypes","name":"dataTypes","optional":"true","type":"String"},{"desc":"A handler to set default values for future Ajax requests.","name":"handler(options, originalOptions, jqXHR)","type":"Function"}]},"examples":null,"longdesc":"\n    <p>A typical prefilter registration using <code>$.ajaxPrefilter()</code> looks like this:</p>\n    <pre><code>\n$.ajaxPrefilter( function( options, originalOptions, jqXHR ) {\n  // Modify options, control originalOptions, store jqXHR, etc\n});\n</code></pre>\n    <p>where:</p>\n    <ul>\n      <li><code>options</code> are the request options</li>\n      <li><code>originalOptions</code> are the options as provided to the ajax method, unmodified and, thus, without defaults from <code>ajaxSettings</code></li>\n      <li><code>jqXHR</code> is the jqXHR object of the request</li>\n    </ul>\n    <p>Prefilters are a perfect fit when custom options need to be handled.  Given the following code, for example, a call to <code>$.ajax()</code> would automatically abort a request to the same URL if the custom <code>abortOnRetry</code> option is set to <code>true</code>:</p>\n    <pre><code>\nvar currentRequests = {};\n\n$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {\n  if ( options.abortOnRetry ) {\n    if ( currentRequests[ options.url ] ) {\n      currentRequests[ options.url ].abort();\n    }\n    currentRequests[ options.url ] = jqXHR;\n  }\n});\n</code></pre>\n    <p>Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through http://mydomain.net/proxy/:</p>\n    <pre><code>\n$.ajaxPrefilter( function( options ) {\n  if ( options.crossDomain ) {\n    options.url = \"http://mydomain.net/proxy/\" + encodeURIComponent( options.url );\n    options.crossDomain = false;\n  }\n});\n</code></pre>\n    <p>If the optional <code>dataTypes</code> argument is supplied, the prefilter will be only be applied to requests with the indicated dataTypes. For example, the following only applies the given prefilter to JSON and script requests:</p>\n    <pre><code>\n$.ajaxPrefilter( \"json script\", function( options, originalOptions, jqXHR ) {\n  // Modify options, control originalOptions, store jqXHR, etc\n});\n</code></pre>\n    <p>The <code>$.ajaxPrefilter()</code> method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as \"script\" if the URL has some specific properties defined in a custom <code>isActuallyScript()</code> function:</p>\n    <pre><code>\n$.ajaxPrefilter(function( options ) {\n  if ( isActuallyScript( options.url ) ) {\n    return \"script\";\n  }\n});\n</code></pre>\n    <p>This would ensure not only that the request is considered \"script\" but also that all the prefilters specifically attached to the script dataType would be applied to it.</p>\n  "}]}