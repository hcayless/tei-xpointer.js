{"name":"data","type":"method","title":".data()","desc":"Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.","categories":["data","miscellaneous/data-storage","version/1.2.3","version/1.4","version/1.4.3"],"entries":[{"return":"jQuery","signatures":[{"added":"1.2.3","argument":[{"desc":"A string naming the piece of data to set.","name":"key","type":"String"},{"desc":"The new data value; it can be any Javascript type including Array or Object.","name":"value","type":"Object"}]},{"added":"1.4.3","argument":{"desc":"An object of key-value pairs of data to update.","name":"obj","type":"Object"}}],"examples":{"desc":"Store then retrieve a value from the div element.","code":"\n$(\"div\").data(\"test\", { first: 16, last: \"pizza!\" });\n$(\"span:first\").text($(\"div\").data(\"test\").first);\n$(\"span:last\").text($(\"div\").data(\"test\").last);\n","css":"\n  div { color:blue; }\n  span { color:red; }\n  ","html":"<div>\n    The values stored were\n    <span></span>\n    and\n    <span></span>\n  </div>"},"desc":"Store arbitrary data associated with the matched elements.","longdesc":"\n      <p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</p>\n      <p> We can set several distinct values for a single element and retrieve them later:</p>\n      <pre><code>\n$('body').data('foo', 52);\n$('body').data('bar', { myType: 'test', count: 40 });\n\n$('body').data('foo'); // 52\n$('body').data(); // {foo: 52, bar: { myType: 'test', count: 40 }}\n</code></pre>\n      <p>In jQuery 1.4.3 setting an element's data object with <code>.data(obj)</code> extends the data previously stored with that element. jQuery itself uses the <code>.data()</code> method to save information under the names 'events' and 'handle', and also reserves any data name starting with an underscore ('_') for internal use.</p>\n      <p>Prior to jQuery 1.4.3 (starting in jQuery 1.4) the .data() method completely replaced all data, instead of just extending the data object. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data.</p>\n      <p>Due to the way browsers interact with plugins and external code, the <code>.data()</code> method cannot be used on <code>&lt;object&gt;</code> (unless it's a Flash plugin), <code>&lt;applet&gt;</code> or <code>&lt;embed&gt;</code> elements.</p>\n    "},{"return":"Object","signatures":[{"added":"1.2.3","argument":{"desc":"Name of the data stored.","name":"key","type":"String"}},{"added":"1.4"}],"examples":{"desc":"Get the data named \"blah\" stored at for an element.","code":"\n$(\"button\").click(function(e) {\n  var value;\n\n  switch ($(\"button\").index(this)) {\n    case 0 :\n      value = $(\"div\").data(\"blah\");\n      break;\n    case 1 :\n      $(\"div\").data(\"blah\", \"hello\");\n      value = \"Stored!\";\n      break;\n    case 2 :\n      $(\"div\").data(\"blah\", 86);\n      value = \"Stored!\";\n      break;\n    case 3 :\n      $(\"div\").removeData(\"blah\");\n      value = \"Removed!\";\n      break;\n  }\n\n  $(\"span\").text(\"\" + value);\n});\n\n","css":"\n  div { margin:5px; background:yellow; }\n  button { margin:5px; font-size:14px; }\n  p { margin:5px; color:blue; }\n  span { color:red; }\n  ","html":"<div>A div</div>\n  <button>Get \"blah\" from the div</button>\n  <button>Set \"blah\" to \"hello\"</button>\n\n  <button>Set \"blah\" to 86</button>\n  <button>Remove \"blah\" from the div</button>\n  <p>The \"blah\" value of this div is <span>?</span></p>"},"desc":"Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.","longdesc":"\n      <p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p>\n      <pre><code>\nalert($('body').data('foo'));\nalert($('body').data());\n</code></pre>\n      <p>The above lines alert the data values that were set on the <code>body</code> element. If no data at all was set on that element, <code>undefined</code> is returned.</p>\n      <pre><code>\nalert( $(\"body\").data(\"foo\")); //undefined\n$(\"body\").data(\"bar\", \"foobar\");\nalert( $(\"body\").data(\"bar\")); //foobar\n</code></pre>\n      <h4 id=\"data-html5\">\n        <a href=\"#data-html5\">HTML5 data-* Attributes</a>\n      </h4>\n      <p>As of jQuery 1.4.3 <a href=\"http://ejohn.org/blog/html-5-data-attributes/\">HTML 5 data- attributes</a> will be automatically pulled in to jQuery's data object. The treatment of attributes with embedded dashes was changed in jQuery 1.6 to conform to the <a href=\"http://www.w3.org/TR/html5/elements.html#embedding-custom-non-visible-data-with-the-data-attributes\">W3C HTML5 specification</a>.</p>\n      <p>For example, given the following HTML:</p>\n      <pre><code>&lt;div data-role=\"page\" data-last-value=\"43\" data-hidden=\"true\" data-options='{\"name\":\"John\"}'&gt;&lt;/div&gt;</code></pre>\n      <p>All of the following jQuery code will work.</p>\n      <pre><code>$(\"div\").data(\"role\") === \"page\";\n$(\"div\").data(\"lastValue\") === 43;\n$(\"div\").data(\"hidden\") === true;\n$(\"div\").data(\"options\").name === \"John\";</code></pre>\n      <p>Every attempt is made to convert the string to a JavaScript value (this includes booleans, numbers, objects, arrays, and null) otherwise it is left as a string. To retrieve the value's attribute as a string without any attempt to convert it, use the <code><a href=\"/attr/\">attr()</a></code> method. When the data attribute is an object (starts with '{') or array (starts with '[') then <code>jQuery.parseJSON</code> is used to parse the string; it must follow <a href=\"http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example\">valid JSON syntax</a> <em>including quoted property names</em>. The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).</p>\n      <p>Calling <code>.data()</code> with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with <code>.data(obj)</code>. Using the object directly to get or set values is faster than making individual calls to <code>.data()</code> to get or set each value:</p>\n      <pre><code>\nvar mydata = $(\"#mydiv\").data();\nif ( mydata.count &lt; 9 ) {\n    mydata.count = 43;\n    mydata.status = \"embiggened\";\n}\n</code></pre>\n    "}]}