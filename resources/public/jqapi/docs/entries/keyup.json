{"name":"keyup","type":"method","title":".keyup()","desc":"Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element.","categories":["events/keyboard-events","version/1.0","version/1.4.3"],"entries":[{"return":"jQuery","signatures":[{"added":"1.0","argument":{"desc":"A function to execute each time the event is triggered.","name":"handler(eventObject)","type":"Function"}},{"added":"1.4.3","argument":[{"desc":"An object containing data that will be passed to the event handler.","name":"eventData","type":"PlainObject","optional":"true"},{"desc":"A function to execute each time the event is triggered.","name":"handler(eventObject)","type":"Function"}]},{"added":"1.0"}],"examples":{"desc":"Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.","code":"\nvar xTriggered = 0;\n$('#target').keyup(function(event) {\n   xTriggered++;\n   var msg = 'Handler for .keyup() called ' + xTriggered + ' time(s).';\n  $.print(msg, 'html');\n  $.print(event);\n}).keydown(function(event) {\n  if (event.which == 13) {\n    event.preventDefault();\n  }\n});\n\n$('#other').click(function() {\n  $('#target').keyup();\n});","css":"\nfieldset { margin-bottom: 1em; }\ninput { display: block; margin-bottom: .25em; }\n#print-output {\n  width: 100%;\n}\n.print-output-line {\n  white-space: pre;\n  padding: 5px;\n  font-family: monaco, monospace;\n  font-size: .7em;\n}\n\n","height":"460","html":"<form>\n  <fieldset>\n    <label for=\"target\">Type Something:</label>\n    <input id=\"target\" type=\"text\" />\n  </fieldset>\n</form>\n<button id=\"other\">\n  Trigger the handler\n</button>\n<script type=\"text/javascript\" src=\"/resources/events.js\"></script>"},"longdesc":"\n    <p>This method is a shortcut for <code>.bind('keyup', handler)</code> in the first two variations, and <code>.trigger('keyup')</code> in the third.</p>\n    <p>The <code>keyup</code> event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p>\n    <p>For example, consider the HTML:</p>\n    <pre><code>&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\" /&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</code></pre>\n    <p>The event handler can be bound to the input field:</p>\n    <pre><code>$('#target').keyup(function() {\n  alert('Handler for .keyup() called.');\n});\n</code></pre>\n    <p>Now when the insertion point is inside the field and a key is pressed and released, the alert is displayed:</p>\n    <p>\n      <span class=\"output\">Handler for .keyup() called.</span>\n    </p>\n    <p>To trigger the event manually, apply <code>.keyup()</code> without arguments:</p>\n    <pre><code>$('#other').click(function() {\n  $('#target').keyup();\n});</code></pre>\n    <p>After this code executes, clicks on <span class=\"output\">Trigger the handler</span> will also alert the message.</p>\n    <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p>\n    <p>To determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p>\n  "}]}