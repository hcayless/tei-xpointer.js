{"name":"unbind","type":"method","title":".unbind()","desc":"Remove a previously-attached event handler from the elements.","categories":["events/event-handler-attachment","version/1.0","version/1.4.3"],"entries":[{"return":"jQuery","signatures":[{"added":"1.0","argument":[{"desc":"A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.","name":"eventType","type":"String","optional":"true"},{"desc":"The function that is to be no longer executed.","name":"handler(eventObject)","type":"Function","optional":"true"}]},{"added":"1.4.3","argument":[{"desc":"A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.","name":"eventType","type":"String"},{"desc":"Unbinds the corresponding 'return false' function that was bound using <code>.bind( eventType, false )</code>.","name":"false","type":"Boolean"}]},{"added":"1.0","argument":{"desc":"A JavaScript event object as passed to an event handler.","name":"event","type":"Object"}}],"examples":[{"desc":"Can bind and unbind events to the colored button.","code":"\nfunction aClick() {\n$(\"div\").show().fadeOut(\"slow\");\n}\n$(\"#bind\").click(function () {\n// could use .bind('click', aClick) instead but for variety...\n$(\"#theone\").click(aClick)\n  .text(\"Can Click!\");\n});\n$(\"#unbind\").click(function () {\n$(\"#theone\").unbind('click', aClick)\n  .text(\"Does nothing...\");\n});\n\n","css":"\nbutton { margin:5px; }\nbutton#theone { color:red; background:yellow; }\n","html":"<button id=\"theone\">Does nothing...</button>\n<button id=\"bind\">Bind Click</button>\n<button id=\"unbind\">Unbind Click</button>\n\n<div style=\"display:none;\">Click!</div>"},{"desc":"To unbind all events from all paragraphs, write:","code":"$(\"p\").unbind()"},{"desc":"To unbind all click events from all paragraphs, write:","code":"$(\"p\").unbind( \"click\" )"},{"desc":"To unbind just one previously bound handler, pass the function in as the second argument:","code":"var foo = function () {\n// code to handle some kind of event\n};\n\n$(\"p\").bind(\"click\", foo); // ... now foo will be called when paragraphs are clicked ...\n\n$(\"p\").unbind(\"click\", foo); // ... foo will no longer be called."}],"longdesc":"\n    <p>Event handlers attached with <code>.bind()</code> can be removed with <code>.unbind()</code>. (As of jQuery 1.7, the <a href=\"http://api.jquery.com/on\"><code>.on()</code></a> and <a href=\"http://api.jquery.com/off\"><code>.off()</code></a> methods are preferred to attach and remove event handlers on elements.) In the simplest case, with no arguments, <code>.unbind()</code> removes all handlers attached to the elements:</p>\n    <pre><code>$('#foo').unbind();</code></pre>\n    <p>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</p>\n    <pre><code>$('#foo').unbind('click');</code></pre>\n    <p>By specifying the <code>click</code> event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:</p>\n    <pre><code>var handler = function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n};\n$('#foo').bind('click', handler);\n$('#foo').unbind('click', handler);\n</code></pre>\n    <p>By naming the handler, we can be assured that no other functions are accidentally removed. Note that the following will <em>not</em> work:</p>\n    <pre><code>$('#foo').bind('click', function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n});\n\n// will NOT work\n$('#foo').unbind('click', function() {\n  alert('The quick brown fox jumps over the lazy dog.');\n});</code></pre>\n    <p>Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.</p>\n    <blockquote>\n      <p><strong>Note:</strong> Using a proxied function to unbind an event on an element will unbind all proxied functions on that element, as the same proxy function is used for all proxied events. To allow unbinding a specific event, use unique class names on the event (e.g. <code>click.proxy1</code>, <code>click.proxy2</code>) when attaching them.</p>\n    </blockquote>\n    <h4>Using Namespaces</h4>\n    <p>Instead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the <code>.bind()</code> method, namespaces are defined by using a period (<code>.</code>) character when binding a handler:</p>\n    <pre><code>$('#foo').bind('click.myEvents', handler);</code></pre>\n    <p>When a handler is bound in this fashion, we can still unbind it the normal way:</p>\n    <pre><code>$('#foo').unbind('click');</code></pre>\n    <p>However, if we want to avoid affecting other handlers, we can be more specific:</p>\n    <pre><code>$('#foo').unbind('click.myEvents');</code></pre>\n    <p>We can also unbind all of the handlers in a namespace, regardless of event type:</p>\n    <pre><code>$('#foo').unbind('.myEvents');</code></pre>\n    <p>It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.</p>\n    <h4>Using the Event Object</h4>\n    <p>The third form of the <code>.unbind()</code> method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</p>\n    <pre><code>var timesClicked = 0;\n$('#foo').bind('click', function(event) {\n  alert('The quick brown fox jumps over the lazy dog.');\n  timesClicked++;\n  if (timesClicked &gt;= 3) {\n    $(this).unbind(event);\n  }\n});\n</code></pre>\n    <p>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for <code>.unbind()</code> to know which handler to remove.\nThis example is also an illustration of a closure. Since the handler refers to the <code>timesClicked</code> variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</p>\n  "}]}