{"name":"mouseover","type":"method","title":".mouseover()","desc":"Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element.","categories":["events/mouse-events","version/1.0","version/1.4.3"],"entries":[{"return":"jQuery","signatures":[{"added":"1.0","argument":{"desc":"A function to execute each time the event is triggered.","name":"handler(eventObject)","type":"Function"}},{"added":"1.4.3","argument":[{"desc":"An object containing data that will be passed to the event handler.","name":"eventData","type":"PlainObject","optional":"true"},{"desc":"A function to execute each time the event is triggered.","name":"handler(eventObject)","type":"Function"}]},{"added":"1.0"}],"examples":{"desc":"Show the number of times mouseover and mouseenter events are triggered.\n<code>mouseover</code> fires when the pointer moves into the child element as well, while <code>mouseenter</code> fires only when the pointer moves into the bound element.","css":"\ndiv.out { width:40%; height:120px; margin:0 15px;\n          background-color:#D6EDFC; float:left; }\ndiv.in {  width:60%; height:60%;\n          background-color:#FFCC00; margin:10px auto; }\np { line-height:1em; margin:0; padding:0; }\n","code":"\n  var i = 0;\n  $(\"div.overout\").mouseover(function() {\n    i += 1;\n    $(this).find(\"span\").text( \"mouse over x \" + i );\n  }).mouseout(function(){\n    $(this).find(\"span\").text(\"mouse out \");\n  });\n\n  var n = 0;\n  $(\"div.enterleave\").mouseenter(function() {\n    n += 1;\n    $(this).find(\"span\").text( \"mouse enter x \" + n );\n  }).mouseleave(function() {\n    $(this).find(\"span\").text(\"mouse leave\");\n  });\n\n","html":"\n<div class=\"out overout\">\n  <span>move your mouse</span>\n  <div class=\"in\">\n  </div>\n</div>\n\n<div class=\"out enterleave\">\n  <span>move your mouse</span>\n  <div class=\"in\">\n  </div>\n</div>\n"},"longdesc":"\n    <p>This method is a shortcut for <code>.bind('mouseover', handler)</code> in the first two variations, and <code>.trigger('mouseover')</code> in the third.</p>\n    <p>The <code>mouseover</code> event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p>\n    <p>For example, consider the HTML:</p>\n    <pre><code>&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</code></pre>\n    <p class=\"image\">\n      <img src=\"/resources/0042_05_06.png\" alt=\"\"/>\n    </p>\n    <p>The event handler can be bound to any element:</p>\n    <pre><code>$('#outer').mouseover(function() {\n  $('#log').append('&lt;div&gt;Handler for .mouseover() called.&lt;/div&gt;');\n});</code></pre>\n    <p>Now when the mouse pointer moves over the <span class=\"output\">Outer</span> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id=\"log\"&gt;</code>. We can also trigger the event when another element is clicked:</p>\n    <pre><code>$('#other').click(function() {\n      $('#outer').mouseover();\n      });</code></pre>\n    <p>After this code executes, clicks on <span class=\"output\">Trigger the handler</span> will also append the message.</p>\n    <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the <span class=\"output\">Inner</span> element in this example, a <code>mouseover</code> event will be sent to that, then trickle up to <span class=\"output\">Outer</span>. This can trigger our bound <code>mouseover</code> handler at inopportune times. See the discussion for <code>.mouseenter()</code> for a useful alternative.</p>\n  "}]}