{"name":"prevAll","type":"method","title":".prevAll()","desc":"Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.","categories":["traversing/tree-traversal","version/1.2"],"entries":[{"return":"jQuery","signatures":{"added":"1.2","argument":{"desc":"A string containing a selector expression to match elements against.","name":"selector","optional":"true","type":"Selector"}},"examples":{"desc":"Locate all the divs preceding the last div and give them a class.","code":"$(\"div:last\").prevAll().addClass(\"before\");","css":"\n\n  div { width:70px; height:70px; background:#abc;\n        border:2px solid black; margin:10px; float:left; }\n  div.before { border-color: red; }\n  ","html":"<div></div>\n  <div></div>\n  <div></div>\n  <div></div>"},"longdesc":"\n    <p>Given a jQuery object that represents a set of DOM elements, the <code>.prevAll()</code> method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.</p>\n    <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>\n    <p>Consider a page with a simple list on it:</p>\n    <pre><code>\n&lt;ul&gt;\n   &lt;li&gt;list item 1&lt;/li&gt;\n   &lt;li&gt;list item 2&lt;/li&gt;\n   &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n   &lt;li&gt;list item 4&lt;/li&gt;\n   &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    <p>If we begin at the third item, we can find the elements which come before it:</p>\n    <pre><code>$('li.third-item').prevAll().css('background-color', 'red');</code></pre>\n    <p>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p>\n  "}]}