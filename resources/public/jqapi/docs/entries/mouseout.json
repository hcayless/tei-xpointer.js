{"name":"mouseout","type":"method","title":".mouseout()","desc":"Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element.","categories":["events/mouse-events","version/1.0","version/1.4.3"],"entries":[{"return":"jQuery","signatures":[{"added":"1.0","argument":{"desc":"A function to execute each time the event is triggered.","name":"handler(eventObject)","type":"Function"}},{"added":"1.4.3","argument":[{"desc":"An object containing data that will be passed to the event handler.","name":"eventData","type":"PlainObject","optional":"true"},{"desc":"A function to execute each time the event is triggered.","name":"handler(eventObject)","type":"Function"}]},{"added":"1.0"}],"examples":{"desc":"Show the number of times mouseout and mouseleave events are triggered.\n  <code>mouseout</code> fires when the pointer moves out of the child element as well, while <code>mouseleave</code> fires only when the pointer moves out of the bound element.","css":"\ndiv.out {\nwidth:40%;\nheight:120px;\nmargin:0 15px;\nbackground-color:#D6EDFC;\nfloat:left;\n}\ndiv.in {\nwidth:60%;\nheight:60%;\nbackground-color:#FFCC00;\nmargin:10px auto;\n}\np {\nline-height:1em;\nmargin:0;\npadding:0;\n}\n","code":"\nvar i = 0;\n$(\"div.overout\").mouseout(function(){\n  $(\"p:first\",this).text(\"mouse out\");\n  $(\"p:last\",this).text(++i);\n}).mouseover(function(){\n  $(\"p:first\",this).text(\"mouse over\");\n});\n\nvar n = 0;\n$(\"div.enterleave\").bind(\"mouseenter\",function(){\n  $(\"p:first\",this).text(\"mouse enter\");\n}).bind(\"mouseleave\",function(){\n  $(\"p:first\",this).text(\"mouse leave\");\n  $(\"p:last\",this).text(++n);\n});\n\n","html":"\n<div class=\"out overout\"><p>move your mouse</p><div class=\"in overout\"><p>move your mouse</p><p>0</p></div><p>0</p></div>\n\n<div class=\"out enterleave\"><p>move your mouse</p><div class=\"in enterleave\"><p>move your mouse</p><p>0</p></div><p>0</p></div>\n\n"},"longdesc":"\n    <p>This method is a shortcut for <code>.bind('mouseout', handler)</code> in the first two variation, and <code>.trigger('mouseout')</code> in the third.</p>\n    <p>The <code>mouseout</code> event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p>\n    <p>For example, consider the HTML:</p>\n    <pre><code>&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</code></pre>\n    <p class=\"image\">\n      <img src=\"/resources/0042_05_07.png\" alt=\"\"/>\n    </p>\n    <p>The event handler can be bound to any element:</p>\n    <pre><code>$('#outer').mouseout(function() {\n  $('#log').append('Handler for .mouseout() called.');\n});</code></pre>\n    <p>Now when the mouse pointer moves out of the <span class=\"output\">Outer</span> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id=\"log\"&gt;</code>. To trigger the event manually, apply <code>.mouseout()</code> without an argument::</p>\n    <pre><code>$('#other').click(function() {\n  $('#outer').mouseout();\n});</code></pre>\n    <p>After this code executes, clicks on <span class=\"output\">Trigger the handler</span> will also append the message.</p>\n    <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the <span class=\"output\">Inner</span> element in this example, a <code>mouseout</code> event will be sent to that, then trickle up to <span class=\"output\">Outer</span>. This can trigger the bound <code>mouseout</code> handler at inopportune times. See the discussion for <code>.<a href=\"/mouseleave\">mouseleave</a>()</code> for a useful alternative.</p>\n  "}]}