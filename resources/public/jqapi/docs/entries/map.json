{"name":"map","type":"method","title":".map()","desc":"Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.","categories":["traversing/filtering","version/1.2"],"entries":[{"return":"jQuery","signatures":{"added":"1.2","argument":{"desc":"A function object that will be invoked for each element in the current set.","name":"callback(index, domElement)","type":"Function"}},"examples":[{"desc":"Build a list of all the values within a form.","code":"\n    $(\"p\").append( $(\"input\").map(function(){\n      return $(this).val();\n    }).get().join(\", \") );\n","css":"\n  p { color:red; }\n  ","html":"<p><b>Values: </b></p>\n  <form>\n    <input type=\"text\" name=\"name\" value=\"John\"/>\n\n    <input type=\"text\" name=\"password\" value=\"password\"/>\n    <input type=\"text\" name=\"url\" value=\"http://ejohn.org/\"/>\n\n  </form>"},{"desc":"A contrived example to show some functionality.","code":"\nvar mappedItems = $(\"li\").map(function (index) {\n  var replacement = $(\"<li>\").text($(this).text()).get(0);\n  if (index == 0) {\n    /* make the first item all caps */\n    $(replacement).text($(replacement).text().toUpperCase());\n  } else if (index == 1 || index == 3) {\n    /* delete the second and fourth items */\n    replacement = null;\n  } else if (index == 2) {\n    /* make two of the third item and add some text */\n    replacement = [replacement,$(\"<li>\").get(0)];\n    $(replacement[0]).append(\"<b> - A</b>\");\n    $(replacement[1]).append(\"Extra <b> - B</b>\");\n  }\n\n  /* replacement will be a dom element, null,\n     or an array of dom elements */\n  return replacement;\n});\n$(\"#results\").append(mappedItems);\n\n","css":"\n  body { font-size:16px; }\n  ul { float:left; margin:0 30px; color:blue; }\n  #results { color:red; }\n  ","html":"<ul>\n    <li>First</li>\n    <li>Second</li>\n    <li>Third</li>\n\n    <li>Fourth</li>\n    <li>Fifth</li>\n  </ul>\n  <ul id=\"results\">\n\n  </ul>"},{"desc":"Equalize the heights of the divs.","code":"\n$.fn.equalizeHeights = function() {\n  var maxHeight = this.map(function(i,e) {\n    return $(e).height();\n  }).get();\n\n  return this.height( Math.max.apply(this, maxHeight) );\n};\n\n$('input').click(function(){\n  $('div').equalizeHeights();\n});\n\n","css":"\ndiv { width: 40px; float:left; }\ninput { clear:left}\n  ","html":"\n\n<input type=\"button\" value=\"equalize div heights\">\n\n<div style=\"background:red; height: 40px; \"></div>\n<div style=\"background:green; height: 70px;\"></div>\n<div style=\"background:blue; height: 50px; \"></div>\n\n"}],"longdesc":"\n    <p>If you wish to process a plain array or object, use the <a href=\"/jQuery.map/\">jQuery.map()</a> instead. </p>\n    <p>As the return value is a jQuery object, which contains an array, it's very common to call <code>.get()</code> on the result to work with a basic array.</p>\n    <p>The <code>.map()</code> method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</p>\n    <pre><code>\n&lt;form method=\"post\" action=\"\"&gt;\n  &lt;fieldset&gt;\n    &lt;div&gt;\n      &lt;label for=\"two\"&gt;2&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"2\" id=\"two\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"four\"&gt;4&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"4\" id=\"four\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"six\"&gt;6&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"6\" id=\"six\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"eight\"&gt;8&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"8\" id=\"eight\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n    <p>To get a comma-separated list of checkbox <code>ID</code>s:</p>\n    <pre><code>$(':checkbox').map(function() {\n      return this.id;\n    }).get().join();</code></pre>\n    <p>The result of this call is the string, <code>\"two,four,six,eight\"</code>.</p>\n    <p>Within the callback function, <code>this</code> refers to the current DOM element for each iteration. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns <code>null</code> or <code>undefined</code>, no element will be inserted.</p>\n  "}]}