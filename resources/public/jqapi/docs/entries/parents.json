{"name":"parents","type":"method","title":".parents()","desc":"Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.","categories":["traversing/tree-traversal","version/1.0"],"entries":[{"return":"jQuery","signatures":{"added":"1.0","argument":{"desc":"A string containing a selector expression to match elements against.","name":"selector","optional":"true","type":"Selector"}},"examples":[{"desc":"Find all parent elements of each b.","code":"\nvar parentEls = $(\"b\").parents()\n            .map(function () {\n                  return this.tagName;\n                })\n            .get().join(\", \");\n$(\"b\").append(\"<strong>\" + parentEls + \"</strong>\");\n","css":"\n  b, span, p, html body {\n    padding: .5em;\n    border: 1px solid;\n  }\n  b { color:blue; }\n  strong { color:red; }\n  ","html":"<div>\n    <p>\n      <span>\n        <b>My parents are: </b>\n      </span>\n    </p>\n  </div>"},{"desc":"Click to find all unique div parent elements of each span.","code":"\nfunction showParents() {\n  $(\"div\").css(\"border-color\", \"white\");\n  var len = $(\"span.selected\")\n                   .parents(\"div\")\n                   .css(\"border\", \"2px red solid\")\n                   .length;\n  $(\"b\").text(\"Unique div parents: \" + len);\n}\n$(\"span\").click(function () {\n  $(this).toggleClass(\"selected\");\n  showParents();\n});","css":"\n\n  p, div, span {margin:2px; padding:1px; }\n  div { border:2px white solid; }\n  span { cursor:pointer; font-size:12px; }\n  .selected { color:blue; }\n  b { color:red; display:block; font-size:14px; }\n  ","html":"<p>\n    <div>\n      <div><span>Hello</span></div>\n      <span>Hello Again</span>\n\n    </div>\n    <div>\n      <span>And Hello Again</span>\n    </div>\n  </p>\n\n  <b>Click Hellos to toggle their parents.</b>"}],"longdesc":"\n    <p>Given a jQuery object that represents a set of DOM elements, the <code>.parents()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. The <code>.parents()</code> and <code><a href=\"http://api.jquery.com/parent/\">.parent()</a></code> methods are similar, except that the latter only travels a single level up the DOM tree.</p>\n    <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>\n    <p>Consider a page with a basic nested list on it:</p>\n    <pre><code>\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    <p>If we begin at item A, we can find its ancestors:</p>\n    <pre><code>$('li.item-a').parents().css('background-color', 'red');</code></pre>\n    <p>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the <code>&lt;html&gt;</code> element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</p>\n  "}]}