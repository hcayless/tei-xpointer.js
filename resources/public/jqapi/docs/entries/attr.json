{"name":"attr","type":"method","title":".attr()","desc":"Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.","categories":["attributes","manipulation/general-attributes","version/1.0","version/1.1","version/1.6"],"entries":[{"return":"String","signatures":{"added":"1.0","argument":{"desc":"The name of the attribute to get.","name":"attributeName","type":"String"}},"examples":{"desc":"Find the title attribute of the first <em> in the page.","code":"\nvar title = $(\"em\").attr(\"title\");\n  $(\"div\").text(title);\n","css":"\n  em { color:blue; font-weight:bold; }\n  div { color:red; }\n","html":"\n<p>\n  Once there was a <em title=\"huge, gigantic\">large</em> dinosaur...\n</p>\n\n  The title of the emphasis is:<div></div>\n"},"desc":"Get the value of an attribute for the first element in the set of matched elements.","longdesc":"\n      <p>The <code>.attr()</code> method gets the attribute value for only the <em>first</em> element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p>\n      <p><strong>As of jQuery 1.6</strong>, the <code>.attr()</code> method returns <code>undefined</code> for attributes that have not been set. In addition, <code>.attr()</code> should not be used on plain objects, arrays, the window, or the document. To retrieve and change DOM properties, use the <a href=\"http://api.jquery.com/prop/\">.prop()</a> method.</p>\n      <p>Using jQuery's <code>.attr()</code> method to get the value of an element's attribute has two main benefits:</p>\n      <ol>\n        <li><strong>Convenience</strong>: It can be called directly on a jQuery object and chained to other jQuery methods.</li>\n        <li><strong>Cross-browser consistency</strong>: The values of some attributes are reported inconsistently across browsers, and even across versions of a single browser. The <code>.attr()</code> method reduces such inconsistencies.</li>\n      </ol>\n      <blockquote>\n        <p><strong>Note:</strong> Attribute values are strings with the exception of a few attributes such as value and tabindex.</p>\n      </blockquote>\n    "},{"return":"jQuery","signatures":[{"added":"1.0","argument":[{"desc":"The name of the attribute to set.","name":"attributeName","type":"String"},{"desc":"A value to set for the attribute.","name":"value","type":"String,Number"}]},{"added":"1.0","argument":{"desc":"An object of attribute-value pairs to set.","name":"attributes","type":"PlainObject"}},{"added":"1.1","argument":[{"desc":"The name of the attribute to set.","name":"attributeName","type":"String"},{"desc":"A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old attribute value as arguments.","name":"function(index, attr)","type":"Function"}]}],"examples":[{"desc":"Set some attributes for all <img>s in the page.","code":"\n$(\"img\").attr({\n  src: \"/resources/hat.gif\",\n  title: \"jQuery\",\n  alt: \"jQuery Logo\"\n});\n$(\"div\").text($(\"img\").attr(\"alt\"));\n","css":"\n  img { padding:10px; }\n  div { color:red; font-size:24px; }\n","html":"\n  <img />\n  <img />\n  <img />\n\n  <div><B>Attribute of Ajax</B></div>\n"},{"desc":"Set the id for divs based on the position in the page.","code":"\n$(\"div\").attr(\"id\", function (arr) {\n  return \"div-id\" + arr;\n})\n.each(function () {\n  $(\"span\", this).html(\"(ID = '<b>\" + this.id + \"</b>')\");\n});\n","css":"\n  div { color:blue; }\n  span { color:red; }\n  b { font-weight:bolder; }\n        ","html":"\n  <div>Zero-th <span></span></div>\n  <div>First <span></span></div>\n  <div>Second <span></span></div>\n"},{"desc":"Set the src attribute from title attribute on the image.","code":"\n$(\"img\").attr(\"src\", function() {\n    return \"/resources/\" + this.title;\n});\n","html":"\n<img title=\"hat.gif\"/>\n"}],"desc":"Set one or more attributes for the set of matched elements.","longdesc":"\n      <p>The <code>.attr()</code> method is a convenient way to set the value of attributes&#x2014;especially when setting multiple attributes or using values returned by a function. Consider the following image:</p>\n      <pre><code>&lt;img id=\"greatphoto\" src=\"brush-seller.jpg\" alt=\"brush seller\" /&gt;</code></pre>\n      <h4 id=\"setting-simple-attr\">Setting a simple attribute</h4>\n      <p>To change the <code>alt</code> attribute, simply pass the name of the attribute and its new value to the <code>.attr()</code> method:</p>\n      <pre><code>$('#greatphoto').attr('alt', 'Beijing Brush Seller');</code></pre>\n      <p><em>Add</em> an attribute the same way:</p>\n      <pre><code>$('#greatphoto')\n.attr('title', 'Photo by Kelly Clark');</code></pre>\n      <h4 id=\"setting-several-attrs\">Setting several attributes at once</h4>\n      <p>To change the <code>alt</code> attribute and add the <code>title</code> attribute at the same time, pass both sets of names and values into the method at once using a plain JavaScript object. Each key-value pair in the object adds or modifies an attribute:</p>\n      <pre><code>$('#greatphoto').attr({\n  alt: 'Beijing Brush Seller',\n  title: 'photo by Kelly Clark'\n});</code></pre>\n      <p>When setting multiple attributes, the quotes around attribute names are optional.</p>\n      <p><strong>WARNING</strong>: When setting the 'class' attribute, you must always use quotes!</p>\n      <p><strong>Note</strong>: jQuery prohibits changing the <code>type</code> attribute on an <code>&lt;input&gt;</code> or <code>&lt;button&gt;</code> element and will throw an error in all browsers. This is because the <code>type</code> attribute cannot be changed in Internet Explorer.</p>\n      <h4 id=\"computed-attr-values\">Computed attribute values</h4>\n      <p>By using a function to set attributes, you can compute the value based on other properties of the element. For example, to concatenate a new value with an existing value:</p>\n      <pre><code>$('#greatphoto').attr('title', function(i, val) {\n  return val + ' - photo by Kelly Clark'\n});</code></pre>\n      <p>This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.</p>\n      <p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function(index, attr){})</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p>\n    "}]}