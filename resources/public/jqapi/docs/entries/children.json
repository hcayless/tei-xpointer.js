{"name":"children","type":"method","title":".children()","desc":"Get the children of each element in the set of matched elements, optionally filtered by a selector.","categories":["traversing/tree-traversal","version/1.0"],"entries":[{"return":"jQuery","signatures":{"added":"1.0","argument":{"desc":"A string containing a selector expression to match elements against.","name":"selector","optional":"true","type":"Selector"}},"examples":[{"desc":"Find all children of the clicked element.","code":"\n\n    $(\"#container\").click(function (e) {\n      $(\"*\").removeClass(\"hilite\");\n      var $kids = $(e.target).children();\n      var len = $kids.addClass(\"hilite\").length;\n\n      $(\"#results span:first\").text(len);\n      $(\"#results span:last\").text(e.target.tagName);\n\n      e.preventDefault();\n      return false;\n    });\n","css":"\n  body { font-size:16px; font-weight:bolder; }\n  div { width:130px; height:82px; margin:10px; float:left;\n        border:1px solid blue; padding:4px; }\n  #container { width:auto; height:105px; margin:0; float:none;\n        border:none; }\n  .hilite { border-color:red; }\n  #results { display:block; color:red; }\n  p { margin:10px; border:1px solid transparent; }\n  span { color:blue; border:1px solid transparent; }\n  input { width:100px; }\n  em { border:1px solid transparent; }\n  a { border:1px solid transparent; }\n  b { border:1px solid transparent; }\n  button { border:1px solid transparent; }\n  ","html":"<div id=\"container\">\n\n    <div>\n      <p>This <span>is the <em>way</em> we</span>\n      write <em>the</em> demo,</p>\n\n    </div>\n    <div>\n      <a href=\"#\"><b>w</b>rit<b>e</b></a> the <span>demo,</span> <button>write\n      the</button> demo,\n    </div>\n\n    <div>\n      This <span>the way we <em>write</em> the <em>demo</em> so</span>\n\n      <input type=\"text\" value=\"early\" /> in\n    </div>\n    <p>\n      <span>t</span>he <span>m</span>orning.\n      <span id=\"results\">Found <span>0</span> children in <span>TAG</span>.</span>\n\n    </p>\n  </div>"},{"desc":"Find all children of each div.","code":"$(\"div\").children().css(\"border-bottom\", \"3px double red\");","css":"\n  body { font-size:16px; font-weight:bolder; }\n  span { color:blue; }\n  p { margin:5px 0; }\n  ","html":"<p>Hello (this is a paragraph)</p>\n\n  <div><span>Hello Again (this span is a child of the a div)</span></div>\n  <p>And <span>Again</span> (in another paragraph)</p>\n\n  <div>And One Last <span>Time</span> (most text directly in a div)</div>"},{"desc":"Find all children with a class \"selected\" of each div.","code":"$(\"div\").children(\".selected\").css(\"color\", \"blue\");","css":"\n\n  body { font-size:16px; font-weight:bolder; }\n  p { margin:5px 0; }\n  ","html":"<div>\n    <span>Hello</span>\n    <p class=\"selected\">Hello Again</p>\n    <div class=\"selected\">And Again</div>\n\n    <p>And One Last Time</p>\n  </div>"}],"longdesc":"\n    <p>Given a jQuery object that represents a set of DOM elements, the <code>.children()</code> method allows us to search throughthe children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.children()</code> method differs from <code><a href=\"http://api.jquery.com/find/\">.find()</a></code> in that <code>.children()</code> only travels a single level down the DOM tree while <code>.find()</code> can traverse down multiple levels to select descendant elements (grandchildren, etc.) as well. Note also that like most jQuery methods, <code>.children()</code> does not return text nodes; to get <em>all</em> children including text and comment nodes, use <code><a href=\"http://api.jquery.com/contents\">.contents()</a></code>.</p>\n    <p>The <code>.children()</code> method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p>\n    <p>Consider a page with a basic nested list on it:</p>\n    <pre><code>\n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n    <p>If we begin at the level-2 list, we can find its children:</p>\n    <pre><code>$('ul.level-2').children().css('background-color', 'red');</code></pre>\n    <p>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</p>\n  "}]}