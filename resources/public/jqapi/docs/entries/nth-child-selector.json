{"name":"nth-child","type":"selector","title":":nth-child() Selector","desc":"Selects all elements that are the nth-child of their parent.","categories":["selectors/child-filter-selectors","version/1.1.4"],"entries":[{"return":"","signatures":{"added":"1.1.4","argument":{"desc":"The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-child(even)</code>, <code>:nth-child(4n)</code> )","name":"index","type":"Number/String"}},"examples":[{"desc":"Find the second li in each matched ul and note it.","code":"$(\"ul li:nth-child(2)\").append(\"<span> - 2nd!</span>\");","css":"\n  div { float:left; }\n  span { color:blue; }\n  ","html":"<div>\n  <ul>\n    <li>John</li>\n    <li>Karl</li>\n    <li>Brandon</li>\n\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Sam</li>\n  </ul>\n</div>\n<div>\n  <ul>\n    <li>Glen</li>\n    <li>Tane</li>\n    <li>Ralph</li>\n    <li>David</li>\n  </ul>\n</div>"},{"desc":"This is a playground to see how the selector works with different strings.  Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one.  The :nth-child, however, counts the index of the child to its particular parent.  In any case, it's easier to see than explain so...","code":"\n$(\"button\").click(function () {\n  var str = $(this).text();\n  $(\"tr\").css(\"background\", \"white\");\n  $(\"tr\" + str).css(\"background\", \"#ff0000\");\n  $(\"#inner\").text(str);\n});\n","css":"\nbutton { display:block; font-size:12px; width:100px; }\ndiv { float:left; margin:10px; font-size:10px;\n      border:1px solid black; }\nspan { color:blue; font-size:18px; }\n#inner { color:red; }\ntd { width:50px; text-align:center; }\n","html":"<div>\n  <button>:nth-child(even)</button>\n  <button>:nth-child(odd)</button>\n  <button>:nth-child(3n)</button>\n  <button>:nth-child(2)</button>\n</div>\n<div>\n  <button>:nth-child(3n+1)</button>\n  <button>:nth-child(3n+2)</button>\n  <button>:even</button>\n  <button>:odd</button>\n</div>\n\n<div>\n  <table>\n    <tr><td>John</td></tr>\n    <tr><td>Karl</td></tr>\n    <tr><td>Brandon</td></tr>\n    <tr><td>Benjamin</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Sam</td></tr>\n  </table>\n</div>\n<div>\n  <table>\n    <tr><td>Glen</td></tr>\n    <tr><td>Tane</td></tr>\n    <tr><td>Ralph</td></tr>\n    <tr><td>David</td></tr>\n    <tr><td>Mike</td></tr>\n    <tr><td>Dan</td></tr>\n  </table>\n</div>\n\n<span>tr<span id=\"inner\"></span></span>\n"}],"longdesc":"\n    <p>Because jQuery's implementation of <code>:nth-</code> selectors is strictly derived from the CSS specification, the value of <code>n</code> is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as <code>:eq()</code> or <code>:even</code> jQuery follows JavaScript's \"0-indexed\" counting. Given a single <code>&lt;ul&gt;</code> containing two <code>&lt;li&gt;</code>s, <code>$('li:nth-child(1)')</code> selects the first <code>&lt;li&gt;</code> while  <code>$('li:eq(1)')</code> selects the second.</p>\n    <p>The <code>:nth-child(n)</code> pseudo-class is easily confused with <code>:eq(n)</code>, even though the two can result in dramatically different matched elements. With <code>:nth-child(n)</code>, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With <code>:eq(n)</code> only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</p>\n    <p>Further discussion of this unusual usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\">W3C CSS specification</a>.</p>\n  "}],"slug":"nth-child-selector"}