{"name":"jQuery.type","type":"method","title":"jQuery.type()","desc":"Determine the internal JavaScript [[Class]] of an object.","categories":["utilities","version/1.4.3"],"entries":[{"return":"String","signatures":{"added":"1.4.3","argument":{"desc":"Object to get the internal JavaScript [[Class]] of.","name":"obj","type":"PlainObject"}},"examples":{"desc":"Find out if the parameter is a RegExp.","code":"$(\"b\").append( \"\" + jQuery.type(/test/) );","html":"Is it a RegExp? <b></b>"},"longdesc":"\n    <p>A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:</p>\n    <ul>\n      <li>If the object is undefined or null, then \"undefined\" or \"null\" is returned accordingly.\n        <ul>\n          <li>jQuery.type( undefined ) === \"undefined\"</li>\n          <li>jQuery.type() === \"undefined\"</li>\n          <li>jQuery.type( window.notDefined ) === \"undefined\"</li>\n          <li>jQuery.type( null ) === \"null\"</li>\n        </ul>\n      </li>\n      <li>If the object has an internal [[Class]] equivalent to one of the browser's built-in objects, the associated name is returned. (<a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">More details about this technique.</a>)\n        <ul>\n          <li>jQuery.type( true ) === \"boolean\"</li>\n          <li>jQuery.type( 3 ) === \"number\"</li>\n          <li>jQuery.type( \"test\" ) === \"string\"</li>\n          <li>jQuery.type( function(){} ) === \"function\"</li>\n          <li>jQuery.type( [] ) === \"array\"</li>\n          <li>jQuery.type( new Date() ) === \"date\"</li>\n          <li>jQuery.type( new Error() ) === \"error\" // <strong>as of jQuery 1.9</strong></li>\n          <li>jQuery.type( /test/ ) === \"regexp\"</li>\n        </ul>\n      </li>\n      <li>Everything else returns \"object\" as its type.</li>\n    </ul>\n  "}]}