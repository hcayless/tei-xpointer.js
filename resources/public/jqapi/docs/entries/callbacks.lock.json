{"name":"callbacks.lock","type":"method","title":"callbacks.lock()","desc":"Lock a callback list in its current state.","categories":["callbacks-object","version/1.7"],"entries":[{"return":"Callbacks","signatures":{"added":"1.7"},"examples":[{"desc":"Use <code>callbacks.lock()</code> to lock a callback list to avoid further changes being made to the list state:","code":"// a sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo:\" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n// add the logging function to the callback list\ncallbacks.add( foo );\n\n// fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// outputs \"foo: hello\"\n\n// lock the callbacks list\ncallbacks.lock();\n\n// try firing the items again\ncallbacks.fire( \"world\" );\n\n// as the list was locked, no items\n// were called, so \"world\" isn\"t logged\n"},{"desc":"Use <code>callbacks.lock()</code> to lock a callback list with \"memory,\" and then resume using the list:","html":"<div id=\"log\"></div>","code":"// simple function for logging results\nvar log = function( value) {\n  $( \"#log\" ).append( \"<p>\" + value + \"</p>\" );\n};\n\n// two sample functions to be added to a callbacks list\nvar foo = function( value ) {\n  log( \"foo: \" + value );\n};\nvar bar = function( value ) {\n  log( \"bar: \" + value );\n};\n\n// create the callbacks object with the \"memory\" flag\nvar callbacks = $.Callbacks( \"memory\" );\n\n// add the foo logging function to the callback list\ncallbacks.add( foo );\n\n// fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// outputs \"foo: hello\"\n\n// lock the callbacks list\ncallbacks.lock();\n\n// try firing the items again\ncallbacks.fire( \"world\" );\n// as the list was locked, no items were called,\n// so \"foo: world\" isn't logged\n\n// add the foo function to the callback list again\ncallbacks.add( foo );\n\n// try firing the items again\ncallbacks.fire( \"silentArgument\" );\n// outputs \"foo: hello\" because the argument value was stored in memory\n\n// add the bar function to the callback list\ncallbacks.add( bar );\n\ncallbacks.fire( \"youHadMeAtHello\" );\n// outputs \"bar: hello\" because the list is still locked,\n// and the argument value is still stored in memory\n"}],"longdesc":"\n    <p>This method returns the Callbacks object onto which it is attached (<code>this</code>). </p>\n    <p>If the Callbacks object is created with the <code>\"memory\"</code> flag as its argument, additional functions may be added and fired after the callback list is locked.</p>\n  "}]}